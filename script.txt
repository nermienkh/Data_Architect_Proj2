-- use WAREHOUSE compute_wh; create internal warehouse then select it if not selected

-- create file formats
1- create or replace file format mycsvformat type='CSV' compression='auto' field_delimiter=',' 
record_delimiter = '\n'  skip_header=1 error_on_column_count_mismatch=true null_if = ('NULL', 'null') empty_field_as_null = true;

2- create or replace file format my_json_format type = 'json' strip_outer_array = true;


-- staging files
-- 1- climate_temprature file 
1- create table climate_temprature  (date string, min int, max int, normal_min double,
                                                 normal_max double); 

2- create or replace stage climate_temperature file_format = mycsvformat;
3- put file:///D:/Udacity_Data_Architect/Project2/temperature.csv @climate_temperature auto_compress=true parallel=4;


4- copy into climate_temprature from @climate_temperature/temperature.csv.gz file_format=mycsvformat on_error='skip_file';

-- 2- climate_percipartion file 

1- create table climate_Precipitation (date string, precipitation string, precipitation_normal
 double);

2- create or replace stage climate_Precipitation file_format = mycsvformat;
3- put file:///D:/Udacity_Data_Architect/Project2/Precipitation.csv @climate_Precipitation auto_compress=true parallel=4;

-- use WAREHOUSE compute_wh; create internal warehouse then select it if not selected
4- copy into climate_Precipitation from @climate_Precipitation/Precipitation.csv.gz
 file_format=mycsvformat on_error='skip_file';


-- 3-YELP business 
-- i will be using variant datatype 

1- create table  Yelp_business (business_json_data variant);
2- create or replace stage Yelp_business file_format = my_json_format;
3- put file:///D:/Udacity_Data_Architect/Project2/YELP/yelp_academic_dataset_business.json @Yelp_business auto_compress=true parallel=4;

4-copy into Yelp_business  from @Yelp_business/yelp_academic_dataset_business.json.gz 
 file_format=my_json_format on_error='skip_file';

-- and so on for the rest of yelp files you just need to change table name and file path

-- 4-Yelp_checkin 
1- create table  Yelp_checkin (checkin_json_data variant);
2- create or replace stage Yelp_checkin file_format = my_json_format;
3- put file:///D:/Udacity_Data_Architect/Project2/YELP/yelp_academic_dataset_checkin.json
@Yelp_checkin auto_compress=true parallel=4;
4- copy into Yelp_checkin  from @Yelp_checkin/yelp_academic_dataset_checkin.json.gz 
file_format=my_json_format on_error='skip_file';

--5- Yelp_review
1- create table  Yelp_review (review_json_data variant);
2- create or replace stage Yelp_review file_format = my_json_format;
3- put file:///D:/Udacity_Data_Architect/Project2/YELP/yelp_academic_dataset_review.json @Yelp_review auto_compress=true parallel=4;
4- copy into Yelp_review  from @Yelp_review/yelp_academic_dataset_review.json.gz 
file_format=my_json_format on_error='skip_file';
 
-- 6-  Yelp_tip
1- create table  Yelp_tip (tip_json_data variant);
2- create or replace stage Yelp_tip file_format = my_json_format;
3- put file:///D:/Udacity_Data_Architect/Project2/YELP/yelp_academic_dataset_tip.json @Yelp_tip auto_compress=true parallel=4;
4- copy into Yelp_tip  from @Yelp_tip/yelp_academic_dataset_tip.json.gz 
file_format=my_json_format on_error='skip_file';


-- 7-  Yelp_user
1- create table  Yelp_user (user_json_data variant);
2- create or replace stage Yelp_user file_format = my_json_format;
3- put file:///D:/Udacity_Data_Architect/Project2/YELP/yelp_academic_dataset_user.json @Yelp_user auto_compress=true parallel=4;
4- copy into Yelp_user  from @Yelp_user/yelp_academic_dataset_user.json.gz 
file_format=my_json_format on_error='skip_file';
 
-- 8-  yelp_covid_features
1- create table  Yelp_covid_features (covid_features_json_data variant);
2- create or replace stage Yelp_covid_features file_format = my_json_format;
3- put file:///D:/Udacity_Data_Architect/Project2/YELP/yelp_covid_features.json @yelp_covid_features auto_compress=true parallel=4;
4- copy into yelp_covid_features  from @yelp_covid_features/yelp_academic_dataset_user.json.gz 
file_format=my_json_format on_error='skip_file';


-- ods tables

CREATE TABLE precipitation (
	date_t DATE,
	precipitation double,
	precipitation_normal double);

CREATE TABLE temperature (
	date_t DATE,
	min_t INT,
	max_t INT,
	normal_min double,
	normal_max double);


CREATE TABLE tip (
	business_id STRING,
	compliment_count INTEGER,
	date STRING,
	text STRING,
	user_id STRING); 

CREATE TABLE business (
	business_id string,
	name string,
	address string,
	city string,
	state string,
	postal_code string,
	latitude FLOAT,
	longitude FLOAT,
	stars FLOAT,
	review_count NUMBER,
	is_open NUMBER,
	attribute VARIANT,
	categories VARCHAR,
	hours VARIANT);


CREATE TABLE user (
	average_stars FLOAT,
	compliment_cool NUMBER,
	compliment_cute NUMBER,
	compliment_funny NUMBER,
	compliment_hot NUMBER,
	compliment_list NUMBER,
	compliment_more NUMBER,
	compliment_note NUMBER,
	compliment_photos NUMBER,
	compliment_plain NUMBER,
	compliment_profile NUMBER,
	compliment_writer NUMBER,
	cool NUMBER,
	elite STRING,
	fans NUMBER,
	friends VARIANT,
	funny NUMBER,
	name VARCHAR,
	review_count NUMBER,
	useful NUMBER,
	user_id VARCHAR,
	yelping_since STRING);


	
CREATE TABLE review(
  business_id VARIANT,
  cool NUMBER,
  date STRING,
  funny NUMBER,
  review_id VARIANT,
  stars NUMBER,
  text STRING,
  useful NUMBER,
  user_id VARIANT);

CREATE TABLE checkin(
	business_id VARIANT,
	date STRING);

CREATE TABLE covid (
	Call_To_Action_enabled VARIANT,
	Covid_Banner VARIANT,
	Grubhub_enabled VARIANT,
	Request_a_Quote_Enabled VARIANT,
	Temporary_Closed_Until VARIANT,
	Virtual_Services_Offered VARIANT,
	business_id VARIANT,
	delivery_or_takeout VARIANT,
	highlights VARIANT);
	

-------------------------------------------------
-- move data from staging to ods
--1 climate_Precipitation data
-- first we need to replace all "T" values into any number to cast data 
use SCHEMA STAGING; 
UPDATE climate_Precipitation SET precipitation = 999999999 WHERE precipitation = 'T'; 
-- number of rows updated 543  

INSERT INTO precipitation(date_t, precipitation, precipitation_normal)
SELECT TO_DATE(date,'YYYYMMDD'), 
CAST(precipitation AS double), 
CAST(precipitation_normal AS double) FROM udacityproject.STAGING.climate_Precipitation;

--2  climate_temperature

INSERT INTO temperature(date_t, min_t, max_t, normal_min, normal_max)
SELECT TO_DATE(date, 'YYYYMMDD'),
CAST(min AS INT),
CAST(max AS INT),
CAST(normal_min AS double),
CAST(normal_max AS double) FROM udacityproject.STAGING.climate_temperature;

--3 yelp_tip

INSERT INTO tip(business_id, compliment_count, date, text, user_id) 
SELECT parse_json($1):business_id,
			parse_json($1):compliment_count,
			parse_json($1):date,
			parse_json($1):text,
			parse_json($1):user_id
	FROM udacityproject.STAGING.yelp_tip;

--4 yelp_business 

INSERT INTO business(business_id,name, address, city, state, postal_code, latitude,longitude,stars, review_count, is_open, attribute, categories, hours)
SELECT parse_json($1):business_id,
			parse_json($1):name,
			parse_json($1):address,
			parse_json($1):city,
			parse_json($1):state,
			parse_json($1):postal_code,
			parse_json($1):latitude,
			parse_json($1):longitude,
			parse_json($1):stars,
			parse_json($1):review_count,
			parse_json($1):is_open,
			parse_json($1):attribute,
			parse_json($1):categories,
			parse_json($1):hours
	FROM udacityproject.STAGING.yelp_business;

--5 yelp_user

INSERT INTO user(average_stars,compliment_cool,compliment_cute,compliment_funny,compliment_hot,compliment_list,compliment_more,
compliment_note,compliment_photos,compliment_plain,compliment_profile,compliment_writer,cool,elite, fans,friends, funny,name, review_count, useful,user_id,yelping_since)
SELECT parse_json($1):average_stars,
	parse_json($1):compliment_cool,
	parse_json($1):compliment_cute,
	parse_json($1):compliment_funny,
	parse_json($1):compliment_hot,
	parse_json($1):compliment_list,
	parse_json($1):compliment_more,
	parse_json($1):compliment_note,
	parse_json($1):compliment_photos,
	parse_json($1):compliment_plain,
	parse_json($1):compliment_profile,
	parse_json($1):compliment_writer,
	parse_json($1):cool,
	parse_json($1):elite, 
	parse_json($1):fans,
	parse_json($1):friends, 
	parse_json($1):funny,
	parse_json($1):name, 
	parse_json($1):review_count, 
	parse_json($1):useful,
	parse_json($1):user_id,
	parse_json($1):yelping_since
	FROM udacityproject.STAGING.yelp_user;

--6 yelp_review

INSERT INTO review(business_id, cool, date, funny, review_id, stars, text, useful, user_id) 
SELECT parse_json($1):business_id, 
	parse_json($1):cool, 
	parse_json($1):date, 
	parse_json($1):funny, 
	parse_json($1):review_id, 
	parse_json($1):stars, 
	parse_json($1):text, 
	parse_json($1):useful, 
	parse_json($1):user_id 
FROM udacityproject.STAGING.yelp_review;

--7 yelp_checkin

INSERT INTO checkin(business_id, date)
SELECT parse_json($1):business_id,
		parse_json($1):date 
		FROM udacityproject.staging.yelp_checkin;

--8 covid

INSERT INTO covid(Call_To_Action_enabled,Covid_Banner,Grubhub_enabled,Request_a_Quote_Enabled, Temporary_Closed_Until,
Virtual_Services_Offered,business_id,delivery_or_takeout,highlights)
SELECT 
	parse_json($1):"Call To Action enabled",
	parse_json($1):"Covid Banner",
	parse_json($1):"Grubhub enabled",
	parse_json($1):"Request a Quote Enabled",
	parse_json($1):"Temporary Closed Until",
	parse_json($1):"Virtual Services Offered",
	parse_json($1):"business_id",
	parse_json($1):"delivery or takeout",
	parse_json($1):"highlights" 
from udacityproject.staging.yelp_covid_features ;